{
	"info": {
		"_postman_id": "32fe178e-d8e7-4296-9278-3814ced52012",
		"name": "API bootcamp Team08_Pavithra_Unauthorized",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37688289",
		"_collection_link": "https://www.postman.com/pavithrasubburaj/workspace/e5a90576-939e-4d5e-8cc4-98f56274deb5/collection/37688289-32fe178e-d8e7-4296-9278-3814ced52012?action=share&source=collection_link&creator=37688289"
	},
	"item": [
		{
			"name": "All users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header Validation\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"Status message validation\", function () {\r",
							"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data validation\", function () {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).contains(\"Unauthorized\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://userserviceapp-f5a54828541b.herokuapp.com/uap/users",
					"protocol": "https",
					"host": [
						"userserviceapp-f5a54828541b",
						"herokuapp",
						"com"
					],
					"path": [
						"uap",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header Validation\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"Status message validation\", function () {\r",
							"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data validation\", function () {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).contains(\"Unauthorized\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/user/:id",
					"host": [
						"{{URL}}"
					],
					"path": [
						"user",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User by FirstName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header Validation\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"Status message validation\", function () {\r",
							"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data validation\", function () {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).contains(\"Unauthorized\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/users/username/:userFirstName",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"username",
						":userFirstName"
					],
					"variable": [
						{
							"key": "userFirstName",
							"value": "Numpy"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Post Create New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header Validation\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"Status message validation\", function () {\r",
							"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data validation\", function () {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).contains(\"Unauthorized\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userAddress\": {\r\n  \r\n    \"plotNumber\": \"{{randomString}}\",\r\n    \"street\": \"{{$randomStreetName}}\",\r\n    \"state\": \"{{$randomCity}}\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"zipCode\": {{$randomInt}}\r\n  },\r\n\r\n  \"user_first_name\": \"{{$randomFirstName}}\",\r\n  \"user_last_name\": \"{{$randomLastName}}\",\r\n  \"user_contact_number\": {{randomNumber}},\r\n  \"user_email_id\": \"{{$randomEmail}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/createusers",
					"host": [
						"{{URL}}"
					],
					"path": [
						"createusers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Put Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header Validation\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"Status message validation\", function () {\r",
							"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data validation\", function () {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).contains(\"Unauthorized\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userAddress\": {\r\n  \r\n    \"plotNumber\": \"{{randomString}}\",\r\n    \"street\": \"{{$randomStreetName}}\",\r\n    \"state\": \"{{$randomCity}}\",\r\n    \"country\": \"{{$randomCountry}}\",\r\n    \"zipCode\": {{$randomInt}}\r\n  },\r\n\r\n  \"user_first_name\": \"{{$randomFirstName}}\",\r\n  \"user_last_name\": \"{{$randomLastName}}\",\r\n  \"user_contact_number\": {{randomNumber}},\r\n  \"user_email_id\": \"{{$randomEmail}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/updateuser/:userId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"updateuser",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "12216"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header Validation\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"Status message validation\", function () {\r",
							"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data validation\", function () {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).contains(\"Unauthorized\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/deleteuser/:userId",
					"host": [
						"{{URL}}"
					],
					"path": [
						"deleteuser",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "12216"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user by FirstName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header Validation\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"pm.test(\"Status message validation\", function () {\r",
							"    pm.expect(pm.response.status).to.equal(\"Unauthorized\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data validation\", function () {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.error).contains(\"Unauthorized\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/deleteuser/username/:userFirstName",
					"host": [
						"{{URL}}"
					],
					"path": [
						"deleteuser",
						"username",
						":userFirstName"
					],
					"variable": [
						{
							"key": "userFirstName",
							"value": "sumaa"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "https://userserviceapp-f5a54828541b.herokuapp.com/uap",
			"type": "string"
		}
	]
}